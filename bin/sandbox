#!/usr/bin/env ruby

# frozen_string_literal: true

BANNER = <<~BANNER_TEXT
  Trickster Arts Hackers sandbox
BANNER_TEXT

BASE_DIR = File.join(__dir__, '..')

require 'optparse'
require 'json'

require 'hackers'
require 'sandbox'
require 'cli/sandbox'

Signal.trap('INT') { exit }

Dir.chdir(BASE_DIR)
CONFIGS_DIR = 'configs'
DEFAULT_CONFIG = 'default'

options = {
  'config' => DEFAULT_CONFIG
}
begin
  OptionParser.new do |opts|
    opts.banner = BANNER
    opts.on('-c config', '', 'Configuration name') do |v|
      options['config'] = v
    end
  end.parse!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
  puts "#{$PROGRAM_NAME}: #{e.message}"
  exit
end

config_file = "#{options['config']}.conf"
unless File.file?("#{CONFIGS_DIR}/#{config_file}")
  puts "#{$PROGRAM_NAME}: Can't load config #{options['config']}"
  exit
end
config = Sandbox::Config.new("#{CONFIGS_DIR}/#{config_file}")
begin
  config.load
rescue JSON::ParserError => e
  puts "#{$PROGRAM_NAME}: Invalid config format"
  puts
  puts e
  exit
end

GAME = Trickster::Hackers::Game.new(config)
SHELL = Sandbox::Shell.new(banner: BANNER)
# if config.key?('autocmd')
#   if config['autocmd'].instance_of?(Array)
#     config['autocmd'].each { |cmd| SHELL.exec(cmd) }
#   else
#     SHELL.exec(config['autocmd'].to_s)
#   end
# end

LOGGER = Sandbox::Logger.new(SHELL)
LOGGER.logPrefix = "\e[1;32m\u2714\e[22;32m "
LOGGER.logSuffix = "\e[0m"
LOGGER.errorPrefix = "\e[1;31m\u2718\e[22;31m "
LOGGER.errorSuffix = "\e[0m"
LOGGER.infoPrefix = "\e[1;37m\u2759\e[22;37m "
LOGGER.infoSuffix = "\e[0m"

require 'cli'

SHELL.run
